import java.util.HashMap;

public class ArrayHard5_max_sum_0_with {
    public static int maxLength(int arr[]) {
        int n = arr.length;
        int sum = 0;
        int max = 0;

        HashMap<Integer,Integer> map = new HashMap<>();

        for (int i = 0; i < n; i++) {
            sum += arr[i];

            if (sum == 0) {
                max = i + 1;
            } else if (map.containsKey(sum)) {
                max = Math.max(max, i - map.get(sum));
            } else {
                map.put(sum, i);
            }
        }
        return max;
    }

    public static void main(String[] args) {
        int arr[] = {15, -2, 2, -8, 1, 7, 10, 23};
        int result = maxLength(arr);
        System.out.println(result);
    }
}

/*
Time Complexity:  O(n)  
   - We traverse the array once (O(n))  
   - Each HashMap operation (put/get/containsKey) is O(1) on average  

Space Complexity: O(n)  
   - HashMap stores at most n prefix sums  
*/
