public class ArrayHard7_merge_to_sorted_array {
    public static void merge(int[] nums1, int m, int[] nums2, int n) {

        int i = m - 1;       // last valid element in nums1
        int j = n - 1;       // last element in nums2
        int k = n + m - 1;   // last index in nums1

        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }

        // copy remaining nums2 elements (if any)
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }

    }

    public static void main(String[] args) {
        int nums1[] = {1, 2, 3, 0, 0, 0};
        int nums2[] = {2, 5, 6};
        int m = 3;
        int n = 3;

        merge(nums1, m, nums2, n);

        for (int i = 0; i < m + n; i++) {
            System.out.print(nums1[i] + " ");
        }
    }
}

/*
Time Complexity:  O(m + n)
    - Each element from nums1 and nums2 is visited at most once.

Space Complexity: O(1)
    - Merging is done in-place in nums1, no extra arrays used.
*/
