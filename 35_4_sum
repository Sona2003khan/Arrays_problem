import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ArraysHard3_4_sum {
    public static List<List<Integer>> fourSum(int[] nums, int target) {

        Arrays.sort(nums); // Sort the array
        List<List<Integer>> list = new ArrayList<>();
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue; // Skip duplicates for i

            for (int j = i + 1; j < n; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; // Skip duplicates for j

                int k = j + 1;
                int l = n - 1;

                while (k < l) {
                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l]; // Use long to avoid overflow
                    if (sum == target) {
                        list.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        k++;
                        l--;

                        // Skip duplicates for k and l
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return list;
    }

    public static void main(String[] args) {
        int nums[] = {1, 0, -1, 0, -2, 2};
        int target = 0;

        List<List<Integer>> ans = fourSum(nums, target);
        System.out.println(ans); // Expected: [[-2,-1,1,2], [-2,0,0,2], [-1,0,0,1]]
    }
}

/*
Time Complexity (TC): O(n^3)
- Outer loop i: n
- Inner loop j: n
- Two-pointer loop (k,l) in worst case: n
- Total: O(n^3)

Space Complexity (SC): O(1) extra space (excluding the output list)
- Sorting uses O(log n) recursion stack
- Output list may use up to O(n^4) in worst case if all quadruplets are unique
*/
