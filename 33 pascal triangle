import java.util.ArrayList;
import java.util.List;

public class ArrayHard1_pascalTriangle {

    // -------------------------------------------
    // Function 1: print_element(row, col)
    // Purpose: Returns the element at given (row, col) in Pascal's Triangle
    // Formula: C(row-1, col-1)
    // Time Complexity: O(col)
    // Space Complexity: O(1)
    // -------------------------------------------
    public static int print_element(int row ,int col){
        int ans = 1;

        for(int i = 0; i < col - 1; i++){
            ans = ans * (row - i - 1);
            ans = ans / (i + 1);
        }
        return ans;
    }

    // -------------------------------------------
    // Function 2: getRow(rowIndex)
    // Purpose: Returns a single row of Pascal's Triangle
    // Formula: C(n, r) = n! / (r! * (n-r)!)
    // Time Complexity: O(rowIndex)
    // Space Complexity: O(rowIndex)
    // -------------------------------------------
    public static List<Integer> getRow(int rowIndex) {
        long ans = 1;
        int n = rowIndex;
        List<Integer> list = new ArrayList<>();

        list.add((int)ans);

        for(int i = 1; i <= n; i++){
            ans = ans * (n - i + 1);
            ans = ans / i;
            list.add((int)ans);
        }
        return list;
    }

    // -------------------------------------------
    // Helper Function: n_c_r(row)
    // Purpose: Returns one row (using combination logic)
    // Time Complexity: O(row)
    // Space Complexity: O(row)
    // -------------------------------------------
    public static List<Integer> n_c_r(int row){
        List<Integer> list = new ArrayList<>();
        int ans = 1;
        list.add(ans);

        for(int col = 1; col <= row; col++){
            ans = ans * (row - col + 1);
            ans = ans / col;
            list.add(ans);
        }
        return list;
    }

    // -------------------------------------------
    // Function 3: generate(numRows)
    // Purpose: Generates Pascal’s Triangle up to numRows
    // Time Complexity: O(n²)
    // Space Complexity: O(n²)
    // -------------------------------------------
    public static List<List<Integer>> generate(int numRows) {
        int n = numRows;
        List<List<Integer>> ans = new ArrayList<>();

        for(int i = 0; i < n; i++){
            ans.add(n_c_r(i));
        }
        return ans;
    }

    // -------------------------------------------
    // MAIN FUNCTION
    // -------------------------------------------
    public static void main(String[] args) {
        int row = 5;
        int col = 3;

        // Prints element at row=5, col=3
        int result = print_element(row, col);
        System.out.println(result); // Output: 6

        // Prints row 5
        List<Integer> result2 = getRow(row);
        System.out.println(result2); // Output: [1, 5, 10, 10, 5, 1]

        // Prints entire Pascal Triangle up to row 5
        List<List<Integer>> result3 = generate(row);
        System.out.println(result3); 
        // Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
    }
}
